[
	{
		"keywords": ["attach","att","at"],
		"usage": "attach [SLOT_NUM]",
		"shortDesc": "Attaches player to SLOT_NUM. Attaching displays the challenge at that slot and will automatically load the necessary language if a module already exists there."
	},
	{
		"keywords": ["boilerplate","bp"],
		"usage": "boilerplate",
		"shortDesc": "Loads the boilerplate code for player's current language"
	},
	{
		"keywords": ["connect","con"],
		"usage": "connect [NODE_ID]",
		"shortDesc": "Connects player to node_id (if connection is possible). Lists nodes connected to the current node if no argument is provided."
	},
	{
		"keywords": ["lang"],
		"usage": "lang [new_lang]",
		"shortDesc": "Sets current language to new_lang (for both code submission and editor syntax hightlight/auto-indent). Displays current language if no argument is provided."
	},
	{
		"keywords": ["langs"],
		"usage": "langs",
		"shortDesc": "Displays a list of available languages."
	},
	{
		"keywords": ["listmod", "ls"],
		"usage": "listmod",
		"shortDesc": "Lists slots (and modules) at the current node."
	},
	{
		"keywords": ["makemod","make"],
		"usage": "make",
		"shortDesc": "Runs editor code against challenge in current slot. Creates a module with health equal to the number of tests passed. If zero tests pass, make fails. Requires attachment to empty slot."
	},
	{
		"keywords": ["refac","ref"],
		"usage": "refac",
		"shortDesc": "Executes editor code against challenge in current slot. In order to be successful, the refactored code must pass at least one more test than the pre-existing code. Player takes ownership of enemy modules if successful. Friendly module is improved if successul. Requires attachment to occupied slot."
	},
	{
		"keywords": ["remove", "rm"],
		"usage": "remove",
		"shortDesc": "Executes editor code against challenge in current slot. Removes enemy module if successful. Friendly modules are removed automatically. Requires attachment to occupied slot."
	},
	{
		"keywords": ["stdin"],
		"usage": "stdin [new_stdin]",
		"shortDesc": "Sets the player's stdin to new_stdin. Used to test code (see test). Displays current stdin if no argument is provided."
	},
	{
		"keywords": ["team","join"],
		"usage": "team [team_name]",
		"shortDesc": "Sets the players team to team_name. Displays the players current team if no argument is provided. Permanent once set."
	},
	{
		"keywords": ["teamchat","tc"],
		"usage": "tc [MESSAGE]",
		"shortDesc": "Broadcasts MESSAGE to all members of player's team. Requires team assignment."
	},
	{
		"keywords": ["teampoe","sp"],
		"usage": "teampoe [NODE_ID]",
		"shortDesc": "Sets the teams point of entry. NODE_ID must be valid point of entry. Permanent once set."
	},
	{
		"keywords": ["tell","t"],
		"usage": "tell [PLAYER] [MESSAGE]",
		"shortDesc": "Displays MESSAGE to PLAYER privately"
	},
	{
		"keywords": ["test"],
		"usage": "test [new_stdin]",
		"shortDesc":"",
		"shortDesc": "Executes the code in the editor using player's stdin (see stdin command). If new_stdin is provided, player's stdin is set to new_stdin before code is executed."
	},
	{
		"keywords": ["who"],
		"usage": "who",
		"shortDesc": "Displays players (and their attachments) at the current node."
	},
	{
		"keywords": ["yell","y"],
		"usage": "yell [MESSAGE]",
		"shortDesc": "Broadcasts MESSAGE to all players in the current game."
	}
]